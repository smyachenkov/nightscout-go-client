/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Devicestatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Devicestatus{}

// Devicestatus struct for Devicestatus
type Devicestatus struct {
	// Device type and hostname for example openaps://hostname
	Device string `json:"device"`
	// dateString, MUST be ISO `8601` format date parseable by Javascript Date()
	CreatedAt string `json:"created_at"`
	// OpenAPS devicestatus record - TODO: Fill Out Details
	Openaps *string `json:"openaps,omitempty"`
	// Loop devicestatus record - TODO: Fill Out Details
	Loop *string `json:"loop,omitempty"`
	Pump *Pump `json:"pump,omitempty"`
	Uploader *Uploader `json:"uploader,omitempty"`
	Xdripjs *Xdripjs `json:"xdripjs,omitempty"`
}

type _Devicestatus Devicestatus

// NewDevicestatus instantiates a new Devicestatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicestatus(device string, createdAt string) *Devicestatus {
	this := Devicestatus{}
	this.Device = device
	this.CreatedAt = createdAt
	return &this
}

// NewDevicestatusWithDefaults instantiates a new Devicestatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicestatusWithDefaults() *Devicestatus {
	this := Devicestatus{}
	return &this
}

// GetDevice returns the Device field value
func (o *Devicestatus) GetDevice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *Devicestatus) GetDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *Devicestatus) SetDevice(v string) {
	o.Device = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Devicestatus) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Devicestatus) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Devicestatus) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetOpenaps returns the Openaps field value if set, zero value otherwise.
func (o *Devicestatus) GetOpenaps() string {
	if o == nil || IsNil(o.Openaps) {
		var ret string
		return ret
	}
	return *o.Openaps
}

// GetOpenapsOk returns a tuple with the Openaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicestatus) GetOpenapsOk() (*string, bool) {
	if o == nil || IsNil(o.Openaps) {
		return nil, false
	}
	return o.Openaps, true
}

// HasOpenaps returns a boolean if a field has been set.
func (o *Devicestatus) HasOpenaps() bool {
	if o != nil && !IsNil(o.Openaps) {
		return true
	}

	return false
}

// SetOpenaps gets a reference to the given string and assigns it to the Openaps field.
func (o *Devicestatus) SetOpenaps(v string) {
	o.Openaps = &v
}

// GetLoop returns the Loop field value if set, zero value otherwise.
func (o *Devicestatus) GetLoop() string {
	if o == nil || IsNil(o.Loop) {
		var ret string
		return ret
	}
	return *o.Loop
}

// GetLoopOk returns a tuple with the Loop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicestatus) GetLoopOk() (*string, bool) {
	if o == nil || IsNil(o.Loop) {
		return nil, false
	}
	return o.Loop, true
}

// HasLoop returns a boolean if a field has been set.
func (o *Devicestatus) HasLoop() bool {
	if o != nil && !IsNil(o.Loop) {
		return true
	}

	return false
}

// SetLoop gets a reference to the given string and assigns it to the Loop field.
func (o *Devicestatus) SetLoop(v string) {
	o.Loop = &v
}

// GetPump returns the Pump field value if set, zero value otherwise.
func (o *Devicestatus) GetPump() Pump {
	if o == nil || IsNil(o.Pump) {
		var ret Pump
		return ret
	}
	return *o.Pump
}

// GetPumpOk returns a tuple with the Pump field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicestatus) GetPumpOk() (*Pump, bool) {
	if o == nil || IsNil(o.Pump) {
		return nil, false
	}
	return o.Pump, true
}

// HasPump returns a boolean if a field has been set.
func (o *Devicestatus) HasPump() bool {
	if o != nil && !IsNil(o.Pump) {
		return true
	}

	return false
}

// SetPump gets a reference to the given Pump and assigns it to the Pump field.
func (o *Devicestatus) SetPump(v Pump) {
	o.Pump = &v
}

// GetUploader returns the Uploader field value if set, zero value otherwise.
func (o *Devicestatus) GetUploader() Uploader {
	if o == nil || IsNil(o.Uploader) {
		var ret Uploader
		return ret
	}
	return *o.Uploader
}

// GetUploaderOk returns a tuple with the Uploader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicestatus) GetUploaderOk() (*Uploader, bool) {
	if o == nil || IsNil(o.Uploader) {
		return nil, false
	}
	return o.Uploader, true
}

// HasUploader returns a boolean if a field has been set.
func (o *Devicestatus) HasUploader() bool {
	if o != nil && !IsNil(o.Uploader) {
		return true
	}

	return false
}

// SetUploader gets a reference to the given Uploader and assigns it to the Uploader field.
func (o *Devicestatus) SetUploader(v Uploader) {
	o.Uploader = &v
}

// GetXdripjs returns the Xdripjs field value if set, zero value otherwise.
func (o *Devicestatus) GetXdripjs() Xdripjs {
	if o == nil || IsNil(o.Xdripjs) {
		var ret Xdripjs
		return ret
	}
	return *o.Xdripjs
}

// GetXdripjsOk returns a tuple with the Xdripjs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicestatus) GetXdripjsOk() (*Xdripjs, bool) {
	if o == nil || IsNil(o.Xdripjs) {
		return nil, false
	}
	return o.Xdripjs, true
}

// HasXdripjs returns a boolean if a field has been set.
func (o *Devicestatus) HasXdripjs() bool {
	if o != nil && !IsNil(o.Xdripjs) {
		return true
	}

	return false
}

// SetXdripjs gets a reference to the given Xdripjs and assigns it to the Xdripjs field.
func (o *Devicestatus) SetXdripjs(v Xdripjs) {
	o.Xdripjs = &v
}

func (o Devicestatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Devicestatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device"] = o.Device
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.Openaps) {
		toSerialize["openaps"] = o.Openaps
	}
	if !IsNil(o.Loop) {
		toSerialize["loop"] = o.Loop
	}
	if !IsNil(o.Pump) {
		toSerialize["pump"] = o.Pump
	}
	if !IsNil(o.Uploader) {
		toSerialize["uploader"] = o.Uploader
	}
	if !IsNil(o.Xdripjs) {
		toSerialize["xdripjs"] = o.Xdripjs
	}
	return toSerialize, nil
}

func (o *Devicestatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevicestatus := _Devicestatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevicestatus)

	if err != nil {
		return err
	}

	*o = Devicestatus(varDevicestatus)

	return err
}

type NullableDevicestatus struct {
	value *Devicestatus
	isSet bool
}

func (v NullableDevicestatus) Get() *Devicestatus {
	return v.value
}

func (v *NullableDevicestatus) Set(val *Devicestatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicestatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicestatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicestatus(val *Devicestatus) *NullableDevicestatus {
	return &NullableDevicestatus{value: val, isSet: true}
}

func (v NullableDevicestatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicestatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


