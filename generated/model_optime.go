/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Optime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Optime{}

// Optime struct for Optime
type Optime struct {
	// Time the operation started
	Ts *string `json:"ts,omitempty"`
	// Time the operation took to complete
	T *int32 `json:"t,omitempty"`
}

// NewOptime instantiates a new Optime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptime() *Optime {
	this := Optime{}
	return &this
}

// NewOptimeWithDefaults instantiates a new Optime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimeWithDefaults() *Optime {
	this := Optime{}
	return &this
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *Optime) GetTs() string {
	if o == nil || IsNil(o.Ts) {
		var ret string
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Optime) GetTsOk() (*string, bool) {
	if o == nil || IsNil(o.Ts) {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *Optime) HasTs() bool {
	if o != nil && !IsNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given string and assigns it to the Ts field.
func (o *Optime) SetTs(v string) {
	o.Ts = &v
}

// GetT returns the T field value if set, zero value otherwise.
func (o *Optime) GetT() int32 {
	if o == nil || IsNil(o.T) {
		var ret int32
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Optime) GetTOk() (*int32, bool) {
	if o == nil || IsNil(o.T) {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *Optime) HasT() bool {
	if o != nil && !IsNil(o.T) {
		return true
	}

	return false
}

// SetT gets a reference to the given int32 and assigns it to the T field.
func (o *Optime) SetT(v int32) {
	o.T = &v
}

func (o Optime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Optime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ts) {
		toSerialize["ts"] = o.Ts
	}
	if !IsNil(o.T) {
		toSerialize["t"] = o.T
	}
	return toSerialize, nil
}

type NullableOptime struct {
	value *Optime
	isSet bool
}

func (v NullableOptime) Get() *Optime {
	return v.value
}

func (v *NullableOptime) Set(val *Optime) {
	v.value = val
	v.isSet = true
}

func (v NullableOptime) IsSet() bool {
	return v.isSet
}

func (v *NullableOptime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptime(val *Optime) *NullableOptime {
	return &NullableOptime{value: val, isSet: true}
}

func (v NullableOptime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


