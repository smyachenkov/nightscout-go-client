/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Status{}

// Status struct for Status
type Status struct {
	// Whether or not the REST API is enabled.
	ApiEnabled *bool `json:"apiEnabled,omitempty"`
	// Whether or not the careportal is enabled in the API.
	CareportalEnabled *bool `json:"careportalEnabled,omitempty"`
	// The git identifier for the running instance of the app.
	Head *string `json:"head,omitempty"`
	// Nightscout (static)
	Name *string `json:"name,omitempty"`
	// The version label of the app.
	Version *string `json:"version,omitempty"`
	Settings *Settings `json:"settings,omitempty"`
	// Extended settings of client side plugins
	ExtendedSettings interface{} `json:"extendedSettings,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus() *Status {
	this := Status{}
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetApiEnabled returns the ApiEnabled field value if set, zero value otherwise.
func (o *Status) GetApiEnabled() bool {
	if o == nil || IsNil(o.ApiEnabled) {
		var ret bool
		return ret
	}
	return *o.ApiEnabled
}

// GetApiEnabledOk returns a tuple with the ApiEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetApiEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ApiEnabled) {
		return nil, false
	}
	return o.ApiEnabled, true
}

// HasApiEnabled returns a boolean if a field has been set.
func (o *Status) HasApiEnabled() bool {
	if o != nil && !IsNil(o.ApiEnabled) {
		return true
	}

	return false
}

// SetApiEnabled gets a reference to the given bool and assigns it to the ApiEnabled field.
func (o *Status) SetApiEnabled(v bool) {
	o.ApiEnabled = &v
}

// GetCareportalEnabled returns the CareportalEnabled field value if set, zero value otherwise.
func (o *Status) GetCareportalEnabled() bool {
	if o == nil || IsNil(o.CareportalEnabled) {
		var ret bool
		return ret
	}
	return *o.CareportalEnabled
}

// GetCareportalEnabledOk returns a tuple with the CareportalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetCareportalEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CareportalEnabled) {
		return nil, false
	}
	return o.CareportalEnabled, true
}

// HasCareportalEnabled returns a boolean if a field has been set.
func (o *Status) HasCareportalEnabled() bool {
	if o != nil && !IsNil(o.CareportalEnabled) {
		return true
	}

	return false
}

// SetCareportalEnabled gets a reference to the given bool and assigns it to the CareportalEnabled field.
func (o *Status) SetCareportalEnabled(v bool) {
	o.CareportalEnabled = &v
}

// GetHead returns the Head field value if set, zero value otherwise.
func (o *Status) GetHead() string {
	if o == nil || IsNil(o.Head) {
		var ret string
		return ret
	}
	return *o.Head
}

// GetHeadOk returns a tuple with the Head field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetHeadOk() (*string, bool) {
	if o == nil || IsNil(o.Head) {
		return nil, false
	}
	return o.Head, true
}

// HasHead returns a boolean if a field has been set.
func (o *Status) HasHead() bool {
	if o != nil && !IsNil(o.Head) {
		return true
	}

	return false
}

// SetHead gets a reference to the given string and assigns it to the Head field.
func (o *Status) SetHead(v string) {
	o.Head = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Status) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Status) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Status) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Status) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Status) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Status) SetVersion(v string) {
	o.Version = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *Status) GetSettings() Settings {
	if o == nil || IsNil(o.Settings) {
		var ret Settings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetSettingsOk() (*Settings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *Status) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given Settings and assigns it to the Settings field.
func (o *Status) SetSettings(v Settings) {
	o.Settings = &v
}

// GetExtendedSettings returns the ExtendedSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Status) GetExtendedSettings() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ExtendedSettings
}

// GetExtendedSettingsOk returns a tuple with the ExtendedSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Status) GetExtendedSettingsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ExtendedSettings) {
		return nil, false
	}
	return &o.ExtendedSettings, true
}

// HasExtendedSettings returns a boolean if a field has been set.
func (o *Status) HasExtendedSettings() bool {
	if o != nil && !IsNil(o.ExtendedSettings) {
		return true
	}

	return false
}

// SetExtendedSettings gets a reference to the given interface{} and assigns it to the ExtendedSettings field.
func (o *Status) SetExtendedSettings(v interface{}) {
	o.ExtendedSettings = v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiEnabled) {
		toSerialize["apiEnabled"] = o.ApiEnabled
	}
	if !IsNil(o.CareportalEnabled) {
		toSerialize["careportalEnabled"] = o.CareportalEnabled
	}
	if !IsNil(o.Head) {
		toSerialize["head"] = o.Head
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if o.ExtendedSettings != nil {
		toSerialize["extendedSettings"] = o.ExtendedSettings
	}
	return toSerialize, nil
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


