/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Entry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entry{}

// Entry struct for Entry
type Entry struct {
	// sgv, mbg, cal, etc
	Type *string `json:"type,omitempty"`
	// dateString, MUST be ISO `8601` format date parseable by Javascript Date()
	DateString *string `json:"dateString,omitempty"`
	// Epoch
	Date *float32 `json:"date,omitempty"`
	// The glucose reading. (only available for sgv types)
	Sgv *float32 `json:"sgv,omitempty"`
	// Direction of glucose trend reported by CGM. (only available for sgv types)
	Direction *string `json:"direction,omitempty"`
	// Noise level at time of reading. (only available for sgv types)
	Noise *float32 `json:"noise,omitempty"`
	// The raw filtered value directly from CGM transmitter. (only available for sgv types)
	Filtered *float32 `json:"filtered,omitempty"`
	// The raw unfiltered value directly from CGM transmitter. (only available for sgv types)
	Unfiltered *float32 `json:"unfiltered,omitempty"`
	// The signal strength from CGM transmitter. (only available for sgv types)
	Rssi *float32 `json:"rssi,omitempty"`
}

// NewEntry instantiates a new Entry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntry() *Entry {
	this := Entry{}
	return &this
}

// NewEntryWithDefaults instantiates a new Entry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryWithDefaults() *Entry {
	this := Entry{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Entry) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Entry) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Entry) SetType(v string) {
	o.Type = &v
}

// GetDateString returns the DateString field value if set, zero value otherwise.
func (o *Entry) GetDateString() string {
	if o == nil || IsNil(o.DateString) {
		var ret string
		return ret
	}
	return *o.DateString
}

// GetDateStringOk returns a tuple with the DateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDateStringOk() (*string, bool) {
	if o == nil || IsNil(o.DateString) {
		return nil, false
	}
	return o.DateString, true
}

// HasDateString returns a boolean if a field has been set.
func (o *Entry) HasDateString() bool {
	if o != nil && !IsNil(o.DateString) {
		return true
	}

	return false
}

// SetDateString gets a reference to the given string and assigns it to the DateString field.
func (o *Entry) SetDateString(v string) {
	o.DateString = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Entry) GetDate() float32 {
	if o == nil || IsNil(o.Date) {
		var ret float32
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDateOk() (*float32, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Entry) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given float32 and assigns it to the Date field.
func (o *Entry) SetDate(v float32) {
	o.Date = &v
}

// GetSgv returns the Sgv field value if set, zero value otherwise.
func (o *Entry) GetSgv() float32 {
	if o == nil || IsNil(o.Sgv) {
		var ret float32
		return ret
	}
	return *o.Sgv
}

// GetSgvOk returns a tuple with the Sgv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetSgvOk() (*float32, bool) {
	if o == nil || IsNil(o.Sgv) {
		return nil, false
	}
	return o.Sgv, true
}

// HasSgv returns a boolean if a field has been set.
func (o *Entry) HasSgv() bool {
	if o != nil && !IsNil(o.Sgv) {
		return true
	}

	return false
}

// SetSgv gets a reference to the given float32 and assigns it to the Sgv field.
func (o *Entry) SetSgv(v float32) {
	o.Sgv = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *Entry) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *Entry) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *Entry) SetDirection(v string) {
	o.Direction = &v
}

// GetNoise returns the Noise field value if set, zero value otherwise.
func (o *Entry) GetNoise() float32 {
	if o == nil || IsNil(o.Noise) {
		var ret float32
		return ret
	}
	return *o.Noise
}

// GetNoiseOk returns a tuple with the Noise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetNoiseOk() (*float32, bool) {
	if o == nil || IsNil(o.Noise) {
		return nil, false
	}
	return o.Noise, true
}

// HasNoise returns a boolean if a field has been set.
func (o *Entry) HasNoise() bool {
	if o != nil && !IsNil(o.Noise) {
		return true
	}

	return false
}

// SetNoise gets a reference to the given float32 and assigns it to the Noise field.
func (o *Entry) SetNoise(v float32) {
	o.Noise = &v
}

// GetFiltered returns the Filtered field value if set, zero value otherwise.
func (o *Entry) GetFiltered() float32 {
	if o == nil || IsNil(o.Filtered) {
		var ret float32
		return ret
	}
	return *o.Filtered
}

// GetFilteredOk returns a tuple with the Filtered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFilteredOk() (*float32, bool) {
	if o == nil || IsNil(o.Filtered) {
		return nil, false
	}
	return o.Filtered, true
}

// HasFiltered returns a boolean if a field has been set.
func (o *Entry) HasFiltered() bool {
	if o != nil && !IsNil(o.Filtered) {
		return true
	}

	return false
}

// SetFiltered gets a reference to the given float32 and assigns it to the Filtered field.
func (o *Entry) SetFiltered(v float32) {
	o.Filtered = &v
}

// GetUnfiltered returns the Unfiltered field value if set, zero value otherwise.
func (o *Entry) GetUnfiltered() float32 {
	if o == nil || IsNil(o.Unfiltered) {
		var ret float32
		return ret
	}
	return *o.Unfiltered
}

// GetUnfilteredOk returns a tuple with the Unfiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetUnfilteredOk() (*float32, bool) {
	if o == nil || IsNil(o.Unfiltered) {
		return nil, false
	}
	return o.Unfiltered, true
}

// HasUnfiltered returns a boolean if a field has been set.
func (o *Entry) HasUnfiltered() bool {
	if o != nil && !IsNil(o.Unfiltered) {
		return true
	}

	return false
}

// SetUnfiltered gets a reference to the given float32 and assigns it to the Unfiltered field.
func (o *Entry) SetUnfiltered(v float32) {
	o.Unfiltered = &v
}

// GetRssi returns the Rssi field value if set, zero value otherwise.
func (o *Entry) GetRssi() float32 {
	if o == nil || IsNil(o.Rssi) {
		var ret float32
		return ret
	}
	return *o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetRssiOk() (*float32, bool) {
	if o == nil || IsNil(o.Rssi) {
		return nil, false
	}
	return o.Rssi, true
}

// HasRssi returns a boolean if a field has been set.
func (o *Entry) HasRssi() bool {
	if o != nil && !IsNil(o.Rssi) {
		return true
	}

	return false
}

// SetRssi gets a reference to the given float32 and assigns it to the Rssi field.
func (o *Entry) SetRssi(v float32) {
	o.Rssi = &v
}

func (o Entry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DateString) {
		toSerialize["dateString"] = o.DateString
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Sgv) {
		toSerialize["sgv"] = o.Sgv
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Noise) {
		toSerialize["noise"] = o.Noise
	}
	if !IsNil(o.Filtered) {
		toSerialize["filtered"] = o.Filtered
	}
	if !IsNil(o.Unfiltered) {
		toSerialize["unfiltered"] = o.Unfiltered
	}
	if !IsNil(o.Rssi) {
		toSerialize["rssi"] = o.Rssi
	}
	return toSerialize, nil
}

type NullableEntry struct {
	value *Entry
	isSet bool
}

func (v NullableEntry) Get() *Entry {
	return v.value
}

func (v *NullableEntry) Set(val *Entry) {
	v.value = val
	v.isSet = true
}

func (v NullableEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntry(val *Entry) *NullableEntry {
	return &NullableEntry{value: val, isSet: true}
}

func (v NullableEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


