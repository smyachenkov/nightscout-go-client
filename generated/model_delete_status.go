/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeleteStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteStatus{}

// DeleteStatus struct for DeleteStatus
type DeleteStatus struct {
	// Number of records deleted
	N *int32 `json:"n,omitempty"`
	Optime *Optime `json:"optime,omitempty"`
	// Election id of operation
	ElectionId *string `json:"electionId,omitempty"`
	// Status of whether delete was successful
	Ok *int32 `json:"ok,omitempty"`
	// Time delete operation was executed
	OperationTime *string `json:"operationTime,omitempty"`
	// Information about execution time in cluster environment
	ClusterTime *string `json:"$clusterTime,omitempty"`
}

// NewDeleteStatus instantiates a new DeleteStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteStatus() *DeleteStatus {
	this := DeleteStatus{}
	return &this
}

// NewDeleteStatusWithDefaults instantiates a new DeleteStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteStatusWithDefaults() *DeleteStatus {
	this := DeleteStatus{}
	return &this
}

// GetN returns the N field value if set, zero value otherwise.
func (o *DeleteStatus) GetN() int32 {
	if o == nil || IsNil(o.N) {
		var ret int32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteStatus) GetNOk() (*int32, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *DeleteStatus) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given int32 and assigns it to the N field.
func (o *DeleteStatus) SetN(v int32) {
	o.N = &v
}

// GetOptime returns the Optime field value if set, zero value otherwise.
func (o *DeleteStatus) GetOptime() Optime {
	if o == nil || IsNil(o.Optime) {
		var ret Optime
		return ret
	}
	return *o.Optime
}

// GetOptimeOk returns a tuple with the Optime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteStatus) GetOptimeOk() (*Optime, bool) {
	if o == nil || IsNil(o.Optime) {
		return nil, false
	}
	return o.Optime, true
}

// HasOptime returns a boolean if a field has been set.
func (o *DeleteStatus) HasOptime() bool {
	if o != nil && !IsNil(o.Optime) {
		return true
	}

	return false
}

// SetOptime gets a reference to the given Optime and assigns it to the Optime field.
func (o *DeleteStatus) SetOptime(v Optime) {
	o.Optime = &v
}

// GetElectionId returns the ElectionId field value if set, zero value otherwise.
func (o *DeleteStatus) GetElectionId() string {
	if o == nil || IsNil(o.ElectionId) {
		var ret string
		return ret
	}
	return *o.ElectionId
}

// GetElectionIdOk returns a tuple with the ElectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteStatus) GetElectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ElectionId) {
		return nil, false
	}
	return o.ElectionId, true
}

// HasElectionId returns a boolean if a field has been set.
func (o *DeleteStatus) HasElectionId() bool {
	if o != nil && !IsNil(o.ElectionId) {
		return true
	}

	return false
}

// SetElectionId gets a reference to the given string and assigns it to the ElectionId field.
func (o *DeleteStatus) SetElectionId(v string) {
	o.ElectionId = &v
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *DeleteStatus) GetOk() int32 {
	if o == nil || IsNil(o.Ok) {
		var ret int32
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteStatus) GetOkOk() (*int32, bool) {
	if o == nil || IsNil(o.Ok) {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *DeleteStatus) HasOk() bool {
	if o != nil && !IsNil(o.Ok) {
		return true
	}

	return false
}

// SetOk gets a reference to the given int32 and assigns it to the Ok field.
func (o *DeleteStatus) SetOk(v int32) {
	o.Ok = &v
}

// GetOperationTime returns the OperationTime field value if set, zero value otherwise.
func (o *DeleteStatus) GetOperationTime() string {
	if o == nil || IsNil(o.OperationTime) {
		var ret string
		return ret
	}
	return *o.OperationTime
}

// GetOperationTimeOk returns a tuple with the OperationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteStatus) GetOperationTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationTime) {
		return nil, false
	}
	return o.OperationTime, true
}

// HasOperationTime returns a boolean if a field has been set.
func (o *DeleteStatus) HasOperationTime() bool {
	if o != nil && !IsNil(o.OperationTime) {
		return true
	}

	return false
}

// SetOperationTime gets a reference to the given string and assigns it to the OperationTime field.
func (o *DeleteStatus) SetOperationTime(v string) {
	o.OperationTime = &v
}

// GetClusterTime returns the ClusterTime field value if set, zero value otherwise.
func (o *DeleteStatus) GetClusterTime() string {
	if o == nil || IsNil(o.ClusterTime) {
		var ret string
		return ret
	}
	return *o.ClusterTime
}

// GetClusterTimeOk returns a tuple with the ClusterTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteStatus) GetClusterTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterTime) {
		return nil, false
	}
	return o.ClusterTime, true
}

// HasClusterTime returns a boolean if a field has been set.
func (o *DeleteStatus) HasClusterTime() bool {
	if o != nil && !IsNil(o.ClusterTime) {
		return true
	}

	return false
}

// SetClusterTime gets a reference to the given string and assigns it to the ClusterTime field.
func (o *DeleteStatus) SetClusterTime(v string) {
	o.ClusterTime = &v
}

func (o DeleteStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.Optime) {
		toSerialize["optime"] = o.Optime
	}
	if !IsNil(o.ElectionId) {
		toSerialize["electionId"] = o.ElectionId
	}
	if !IsNil(o.Ok) {
		toSerialize["ok"] = o.Ok
	}
	if !IsNil(o.OperationTime) {
		toSerialize["operationTime"] = o.OperationTime
	}
	if !IsNil(o.ClusterTime) {
		toSerialize["$clusterTime"] = o.ClusterTime
	}
	return toSerialize, nil
}

type NullableDeleteStatus struct {
	value *DeleteStatus
	isSet bool
}

func (v NullableDeleteStatus) Get() *DeleteStatus {
	return v.value
}

func (v *NullableDeleteStatus) Set(val *DeleteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteStatus(val *DeleteStatus) *NullableDeleteStatus {
	return &NullableDeleteStatus{value: val, isSet: true}
}

func (v NullableDeleteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


