/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Pumpbattery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pumpbattery{}

// Pumpbattery struct for Pumpbattery
type Pumpbattery struct {
	// Pump Battery Status String
	Status *string `json:"status,omitempty"`
	// Pump Battery Voltage Level
	Voltage *float32 `json:"voltage,omitempty"`
}

// NewPumpbattery instantiates a new Pumpbattery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPumpbattery() *Pumpbattery {
	this := Pumpbattery{}
	return &this
}

// NewPumpbatteryWithDefaults instantiates a new Pumpbattery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPumpbatteryWithDefaults() *Pumpbattery {
	this := Pumpbattery{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Pumpbattery) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pumpbattery) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Pumpbattery) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Pumpbattery) SetStatus(v string) {
	o.Status = &v
}

// GetVoltage returns the Voltage field value if set, zero value otherwise.
func (o *Pumpbattery) GetVoltage() float32 {
	if o == nil || IsNil(o.Voltage) {
		var ret float32
		return ret
	}
	return *o.Voltage
}

// GetVoltageOk returns a tuple with the Voltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pumpbattery) GetVoltageOk() (*float32, bool) {
	if o == nil || IsNil(o.Voltage) {
		return nil, false
	}
	return o.Voltage, true
}

// HasVoltage returns a boolean if a field has been set.
func (o *Pumpbattery) HasVoltage() bool {
	if o != nil && !IsNil(o.Voltage) {
		return true
	}

	return false
}

// SetVoltage gets a reference to the given float32 and assigns it to the Voltage field.
func (o *Pumpbattery) SetVoltage(v float32) {
	o.Voltage = &v
}

func (o Pumpbattery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pumpbattery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Voltage) {
		toSerialize["voltage"] = o.Voltage
	}
	return toSerialize, nil
}

type NullablePumpbattery struct {
	value *Pumpbattery
	isSet bool
}

func (v NullablePumpbattery) Get() *Pumpbattery {
	return v.value
}

func (v *NullablePumpbattery) Set(val *Pumpbattery) {
	v.value = val
	v.isSet = true
}

func (v NullablePumpbattery) IsSet() bool {
	return v.isSet
}

func (v *NullablePumpbattery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePumpbattery(val *Pumpbattery) *NullablePumpbattery {
	return &NullablePumpbattery{value: val, isSet: true}
}

func (v NullablePumpbattery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePumpbattery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


