/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Xdripjs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Xdripjs{}

// Xdripjs struct for Xdripjs
type Xdripjs struct {
	// CGM Sensor Session State Code
	State *float32 `json:"state,omitempty"`
	// CGM Sensor Session State String
	StateString *string `json:"stateString,omitempty"`
	// CGM Sensor Session State Short String
	StateStringShort *string `json:"stateStringShort,omitempty"`
	// CGM Transmitter ID
	TxId *string `json:"txId,omitempty"`
	// CGM Transmitter Status
	TxStatus *float32 `json:"txStatus,omitempty"`
	// CGM Transmitter Status String
	TxStatusString *string `json:"txStatusString,omitempty"`
	// CGM Transmitter Status Short String
	TxStatusStringShort *string `json:"txStatusStringShort,omitempty"`
	// CGM Transmitter Activation Milliseconds After Epoch
	TxActivation *float32 `json:"txActivation,omitempty"`
	// Mode xdrip-js Application Operationg: expired, not expired, etc.
	Mode *string `json:"mode,omitempty"`
	// Last Update Milliseconds After Epoch
	Timestamp *float32 `json:"timestamp,omitempty"`
	// Receive Signal Strength of Transmitter
	Rssi *float32 `json:"rssi,omitempty"`
	// Most Recent Raw Unfiltered Glucose
	Unfiltered *float32 `json:"unfiltered,omitempty"`
	// Most Recent Raw Filtered Glucose
	Filtered *float32 `json:"filtered,omitempty"`
	// Calculated Noise Value - 1=Clean, 2=Light, 3=Medium, 4=Heavy
	Noise *float32 `json:"noise,omitempty"`
	// Noise Value String
	NoiseString *float32 `json:"noiseString,omitempty"`
	// Calibration Slope Value
	Slope *float32 `json:"slope,omitempty"`
	// Calibration Intercept Value
	Intercept *float32 `json:"intercept,omitempty"`
	// Algorithm Used to Calculate Calibration Values
	CalType *string `json:"calType,omitempty"`
	// Most Recent Calibration Milliseconds After Epoch
	LastCalibrationDate *float32 `json:"lastCalibrationDate,omitempty"`
	// Sensor Session Start Milliseconds After Epoch
	SessionStart *float32 `json:"sessionStart,omitempty"`
	// Most Recent Batter Status Read Milliseconds After Epoch
	BatteryTimestamp *float32 `json:"batteryTimestamp,omitempty"`
	// Voltage of Battery A
	Voltagea *float32 `json:"voltagea,omitempty"`
	// Voltage of Battery B
	Voltageb *float32 `json:"voltageb,omitempty"`
	// Transmitter Temperature
	Temperature *float32 `json:"temperature,omitempty"`
	// Sensor Resistance
	Resistance *float32 `json:"resistance,omitempty"`
}

// NewXdripjs instantiates a new Xdripjs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewXdripjs() *Xdripjs {
	this := Xdripjs{}
	return &this
}

// NewXdripjsWithDefaults instantiates a new Xdripjs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewXdripjsWithDefaults() *Xdripjs {
	this := Xdripjs{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Xdripjs) GetState() float32 {
	if o == nil || IsNil(o.State) {
		var ret float32
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetStateOk() (*float32, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Xdripjs) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given float32 and assigns it to the State field.
func (o *Xdripjs) SetState(v float32) {
	o.State = &v
}

// GetStateString returns the StateString field value if set, zero value otherwise.
func (o *Xdripjs) GetStateString() string {
	if o == nil || IsNil(o.StateString) {
		var ret string
		return ret
	}
	return *o.StateString
}

// GetStateStringOk returns a tuple with the StateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetStateStringOk() (*string, bool) {
	if o == nil || IsNil(o.StateString) {
		return nil, false
	}
	return o.StateString, true
}

// HasStateString returns a boolean if a field has been set.
func (o *Xdripjs) HasStateString() bool {
	if o != nil && !IsNil(o.StateString) {
		return true
	}

	return false
}

// SetStateString gets a reference to the given string and assigns it to the StateString field.
func (o *Xdripjs) SetStateString(v string) {
	o.StateString = &v
}

// GetStateStringShort returns the StateStringShort field value if set, zero value otherwise.
func (o *Xdripjs) GetStateStringShort() string {
	if o == nil || IsNil(o.StateStringShort) {
		var ret string
		return ret
	}
	return *o.StateStringShort
}

// GetStateStringShortOk returns a tuple with the StateStringShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetStateStringShortOk() (*string, bool) {
	if o == nil || IsNil(o.StateStringShort) {
		return nil, false
	}
	return o.StateStringShort, true
}

// HasStateStringShort returns a boolean if a field has been set.
func (o *Xdripjs) HasStateStringShort() bool {
	if o != nil && !IsNil(o.StateStringShort) {
		return true
	}

	return false
}

// SetStateStringShort gets a reference to the given string and assigns it to the StateStringShort field.
func (o *Xdripjs) SetStateStringShort(v string) {
	o.StateStringShort = &v
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *Xdripjs) GetTxId() string {
	if o == nil || IsNil(o.TxId) {
		var ret string
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetTxIdOk() (*string, bool) {
	if o == nil || IsNil(o.TxId) {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *Xdripjs) HasTxId() bool {
	if o != nil && !IsNil(o.TxId) {
		return true
	}

	return false
}

// SetTxId gets a reference to the given string and assigns it to the TxId field.
func (o *Xdripjs) SetTxId(v string) {
	o.TxId = &v
}

// GetTxStatus returns the TxStatus field value if set, zero value otherwise.
func (o *Xdripjs) GetTxStatus() float32 {
	if o == nil || IsNil(o.TxStatus) {
		var ret float32
		return ret
	}
	return *o.TxStatus
}

// GetTxStatusOk returns a tuple with the TxStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetTxStatusOk() (*float32, bool) {
	if o == nil || IsNil(o.TxStatus) {
		return nil, false
	}
	return o.TxStatus, true
}

// HasTxStatus returns a boolean if a field has been set.
func (o *Xdripjs) HasTxStatus() bool {
	if o != nil && !IsNil(o.TxStatus) {
		return true
	}

	return false
}

// SetTxStatus gets a reference to the given float32 and assigns it to the TxStatus field.
func (o *Xdripjs) SetTxStatus(v float32) {
	o.TxStatus = &v
}

// GetTxStatusString returns the TxStatusString field value if set, zero value otherwise.
func (o *Xdripjs) GetTxStatusString() string {
	if o == nil || IsNil(o.TxStatusString) {
		var ret string
		return ret
	}
	return *o.TxStatusString
}

// GetTxStatusStringOk returns a tuple with the TxStatusString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetTxStatusStringOk() (*string, bool) {
	if o == nil || IsNil(o.TxStatusString) {
		return nil, false
	}
	return o.TxStatusString, true
}

// HasTxStatusString returns a boolean if a field has been set.
func (o *Xdripjs) HasTxStatusString() bool {
	if o != nil && !IsNil(o.TxStatusString) {
		return true
	}

	return false
}

// SetTxStatusString gets a reference to the given string and assigns it to the TxStatusString field.
func (o *Xdripjs) SetTxStatusString(v string) {
	o.TxStatusString = &v
}

// GetTxStatusStringShort returns the TxStatusStringShort field value if set, zero value otherwise.
func (o *Xdripjs) GetTxStatusStringShort() string {
	if o == nil || IsNil(o.TxStatusStringShort) {
		var ret string
		return ret
	}
	return *o.TxStatusStringShort
}

// GetTxStatusStringShortOk returns a tuple with the TxStatusStringShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetTxStatusStringShortOk() (*string, bool) {
	if o == nil || IsNil(o.TxStatusStringShort) {
		return nil, false
	}
	return o.TxStatusStringShort, true
}

// HasTxStatusStringShort returns a boolean if a field has been set.
func (o *Xdripjs) HasTxStatusStringShort() bool {
	if o != nil && !IsNil(o.TxStatusStringShort) {
		return true
	}

	return false
}

// SetTxStatusStringShort gets a reference to the given string and assigns it to the TxStatusStringShort field.
func (o *Xdripjs) SetTxStatusStringShort(v string) {
	o.TxStatusStringShort = &v
}

// GetTxActivation returns the TxActivation field value if set, zero value otherwise.
func (o *Xdripjs) GetTxActivation() float32 {
	if o == nil || IsNil(o.TxActivation) {
		var ret float32
		return ret
	}
	return *o.TxActivation
}

// GetTxActivationOk returns a tuple with the TxActivation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetTxActivationOk() (*float32, bool) {
	if o == nil || IsNil(o.TxActivation) {
		return nil, false
	}
	return o.TxActivation, true
}

// HasTxActivation returns a boolean if a field has been set.
func (o *Xdripjs) HasTxActivation() bool {
	if o != nil && !IsNil(o.TxActivation) {
		return true
	}

	return false
}

// SetTxActivation gets a reference to the given float32 and assigns it to the TxActivation field.
func (o *Xdripjs) SetTxActivation(v float32) {
	o.TxActivation = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Xdripjs) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Xdripjs) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *Xdripjs) SetMode(v string) {
	o.Mode = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Xdripjs) GetTimestamp() float32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret float32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Xdripjs) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given float32 and assigns it to the Timestamp field.
func (o *Xdripjs) SetTimestamp(v float32) {
	o.Timestamp = &v
}

// GetRssi returns the Rssi field value if set, zero value otherwise.
func (o *Xdripjs) GetRssi() float32 {
	if o == nil || IsNil(o.Rssi) {
		var ret float32
		return ret
	}
	return *o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetRssiOk() (*float32, bool) {
	if o == nil || IsNil(o.Rssi) {
		return nil, false
	}
	return o.Rssi, true
}

// HasRssi returns a boolean if a field has been set.
func (o *Xdripjs) HasRssi() bool {
	if o != nil && !IsNil(o.Rssi) {
		return true
	}

	return false
}

// SetRssi gets a reference to the given float32 and assigns it to the Rssi field.
func (o *Xdripjs) SetRssi(v float32) {
	o.Rssi = &v
}

// GetUnfiltered returns the Unfiltered field value if set, zero value otherwise.
func (o *Xdripjs) GetUnfiltered() float32 {
	if o == nil || IsNil(o.Unfiltered) {
		var ret float32
		return ret
	}
	return *o.Unfiltered
}

// GetUnfilteredOk returns a tuple with the Unfiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetUnfilteredOk() (*float32, bool) {
	if o == nil || IsNil(o.Unfiltered) {
		return nil, false
	}
	return o.Unfiltered, true
}

// HasUnfiltered returns a boolean if a field has been set.
func (o *Xdripjs) HasUnfiltered() bool {
	if o != nil && !IsNil(o.Unfiltered) {
		return true
	}

	return false
}

// SetUnfiltered gets a reference to the given float32 and assigns it to the Unfiltered field.
func (o *Xdripjs) SetUnfiltered(v float32) {
	o.Unfiltered = &v
}

// GetFiltered returns the Filtered field value if set, zero value otherwise.
func (o *Xdripjs) GetFiltered() float32 {
	if o == nil || IsNil(o.Filtered) {
		var ret float32
		return ret
	}
	return *o.Filtered
}

// GetFilteredOk returns a tuple with the Filtered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetFilteredOk() (*float32, bool) {
	if o == nil || IsNil(o.Filtered) {
		return nil, false
	}
	return o.Filtered, true
}

// HasFiltered returns a boolean if a field has been set.
func (o *Xdripjs) HasFiltered() bool {
	if o != nil && !IsNil(o.Filtered) {
		return true
	}

	return false
}

// SetFiltered gets a reference to the given float32 and assigns it to the Filtered field.
func (o *Xdripjs) SetFiltered(v float32) {
	o.Filtered = &v
}

// GetNoise returns the Noise field value if set, zero value otherwise.
func (o *Xdripjs) GetNoise() float32 {
	if o == nil || IsNil(o.Noise) {
		var ret float32
		return ret
	}
	return *o.Noise
}

// GetNoiseOk returns a tuple with the Noise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetNoiseOk() (*float32, bool) {
	if o == nil || IsNil(o.Noise) {
		return nil, false
	}
	return o.Noise, true
}

// HasNoise returns a boolean if a field has been set.
func (o *Xdripjs) HasNoise() bool {
	if o != nil && !IsNil(o.Noise) {
		return true
	}

	return false
}

// SetNoise gets a reference to the given float32 and assigns it to the Noise field.
func (o *Xdripjs) SetNoise(v float32) {
	o.Noise = &v
}

// GetNoiseString returns the NoiseString field value if set, zero value otherwise.
func (o *Xdripjs) GetNoiseString() float32 {
	if o == nil || IsNil(o.NoiseString) {
		var ret float32
		return ret
	}
	return *o.NoiseString
}

// GetNoiseStringOk returns a tuple with the NoiseString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetNoiseStringOk() (*float32, bool) {
	if o == nil || IsNil(o.NoiseString) {
		return nil, false
	}
	return o.NoiseString, true
}

// HasNoiseString returns a boolean if a field has been set.
func (o *Xdripjs) HasNoiseString() bool {
	if o != nil && !IsNil(o.NoiseString) {
		return true
	}

	return false
}

// SetNoiseString gets a reference to the given float32 and assigns it to the NoiseString field.
func (o *Xdripjs) SetNoiseString(v float32) {
	o.NoiseString = &v
}

// GetSlope returns the Slope field value if set, zero value otherwise.
func (o *Xdripjs) GetSlope() float32 {
	if o == nil || IsNil(o.Slope) {
		var ret float32
		return ret
	}
	return *o.Slope
}

// GetSlopeOk returns a tuple with the Slope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetSlopeOk() (*float32, bool) {
	if o == nil || IsNil(o.Slope) {
		return nil, false
	}
	return o.Slope, true
}

// HasSlope returns a boolean if a field has been set.
func (o *Xdripjs) HasSlope() bool {
	if o != nil && !IsNil(o.Slope) {
		return true
	}

	return false
}

// SetSlope gets a reference to the given float32 and assigns it to the Slope field.
func (o *Xdripjs) SetSlope(v float32) {
	o.Slope = &v
}

// GetIntercept returns the Intercept field value if set, zero value otherwise.
func (o *Xdripjs) GetIntercept() float32 {
	if o == nil || IsNil(o.Intercept) {
		var ret float32
		return ret
	}
	return *o.Intercept
}

// GetInterceptOk returns a tuple with the Intercept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetInterceptOk() (*float32, bool) {
	if o == nil || IsNil(o.Intercept) {
		return nil, false
	}
	return o.Intercept, true
}

// HasIntercept returns a boolean if a field has been set.
func (o *Xdripjs) HasIntercept() bool {
	if o != nil && !IsNil(o.Intercept) {
		return true
	}

	return false
}

// SetIntercept gets a reference to the given float32 and assigns it to the Intercept field.
func (o *Xdripjs) SetIntercept(v float32) {
	o.Intercept = &v
}

// GetCalType returns the CalType field value if set, zero value otherwise.
func (o *Xdripjs) GetCalType() string {
	if o == nil || IsNil(o.CalType) {
		var ret string
		return ret
	}
	return *o.CalType
}

// GetCalTypeOk returns a tuple with the CalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetCalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CalType) {
		return nil, false
	}
	return o.CalType, true
}

// HasCalType returns a boolean if a field has been set.
func (o *Xdripjs) HasCalType() bool {
	if o != nil && !IsNil(o.CalType) {
		return true
	}

	return false
}

// SetCalType gets a reference to the given string and assigns it to the CalType field.
func (o *Xdripjs) SetCalType(v string) {
	o.CalType = &v
}

// GetLastCalibrationDate returns the LastCalibrationDate field value if set, zero value otherwise.
func (o *Xdripjs) GetLastCalibrationDate() float32 {
	if o == nil || IsNil(o.LastCalibrationDate) {
		var ret float32
		return ret
	}
	return *o.LastCalibrationDate
}

// GetLastCalibrationDateOk returns a tuple with the LastCalibrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetLastCalibrationDateOk() (*float32, bool) {
	if o == nil || IsNil(o.LastCalibrationDate) {
		return nil, false
	}
	return o.LastCalibrationDate, true
}

// HasLastCalibrationDate returns a boolean if a field has been set.
func (o *Xdripjs) HasLastCalibrationDate() bool {
	if o != nil && !IsNil(o.LastCalibrationDate) {
		return true
	}

	return false
}

// SetLastCalibrationDate gets a reference to the given float32 and assigns it to the LastCalibrationDate field.
func (o *Xdripjs) SetLastCalibrationDate(v float32) {
	o.LastCalibrationDate = &v
}

// GetSessionStart returns the SessionStart field value if set, zero value otherwise.
func (o *Xdripjs) GetSessionStart() float32 {
	if o == nil || IsNil(o.SessionStart) {
		var ret float32
		return ret
	}
	return *o.SessionStart
}

// GetSessionStartOk returns a tuple with the SessionStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetSessionStartOk() (*float32, bool) {
	if o == nil || IsNil(o.SessionStart) {
		return nil, false
	}
	return o.SessionStart, true
}

// HasSessionStart returns a boolean if a field has been set.
func (o *Xdripjs) HasSessionStart() bool {
	if o != nil && !IsNil(o.SessionStart) {
		return true
	}

	return false
}

// SetSessionStart gets a reference to the given float32 and assigns it to the SessionStart field.
func (o *Xdripjs) SetSessionStart(v float32) {
	o.SessionStart = &v
}

// GetBatteryTimestamp returns the BatteryTimestamp field value if set, zero value otherwise.
func (o *Xdripjs) GetBatteryTimestamp() float32 {
	if o == nil || IsNil(o.BatteryTimestamp) {
		var ret float32
		return ret
	}
	return *o.BatteryTimestamp
}

// GetBatteryTimestampOk returns a tuple with the BatteryTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetBatteryTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.BatteryTimestamp) {
		return nil, false
	}
	return o.BatteryTimestamp, true
}

// HasBatteryTimestamp returns a boolean if a field has been set.
func (o *Xdripjs) HasBatteryTimestamp() bool {
	if o != nil && !IsNil(o.BatteryTimestamp) {
		return true
	}

	return false
}

// SetBatteryTimestamp gets a reference to the given float32 and assigns it to the BatteryTimestamp field.
func (o *Xdripjs) SetBatteryTimestamp(v float32) {
	o.BatteryTimestamp = &v
}

// GetVoltagea returns the Voltagea field value if set, zero value otherwise.
func (o *Xdripjs) GetVoltagea() float32 {
	if o == nil || IsNil(o.Voltagea) {
		var ret float32
		return ret
	}
	return *o.Voltagea
}

// GetVoltageaOk returns a tuple with the Voltagea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetVoltageaOk() (*float32, bool) {
	if o == nil || IsNil(o.Voltagea) {
		return nil, false
	}
	return o.Voltagea, true
}

// HasVoltagea returns a boolean if a field has been set.
func (o *Xdripjs) HasVoltagea() bool {
	if o != nil && !IsNil(o.Voltagea) {
		return true
	}

	return false
}

// SetVoltagea gets a reference to the given float32 and assigns it to the Voltagea field.
func (o *Xdripjs) SetVoltagea(v float32) {
	o.Voltagea = &v
}

// GetVoltageb returns the Voltageb field value if set, zero value otherwise.
func (o *Xdripjs) GetVoltageb() float32 {
	if o == nil || IsNil(o.Voltageb) {
		var ret float32
		return ret
	}
	return *o.Voltageb
}

// GetVoltagebOk returns a tuple with the Voltageb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetVoltagebOk() (*float32, bool) {
	if o == nil || IsNil(o.Voltageb) {
		return nil, false
	}
	return o.Voltageb, true
}

// HasVoltageb returns a boolean if a field has been set.
func (o *Xdripjs) HasVoltageb() bool {
	if o != nil && !IsNil(o.Voltageb) {
		return true
	}

	return false
}

// SetVoltageb gets a reference to the given float32 and assigns it to the Voltageb field.
func (o *Xdripjs) SetVoltageb(v float32) {
	o.Voltageb = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *Xdripjs) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *Xdripjs) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *Xdripjs) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetResistance returns the Resistance field value if set, zero value otherwise.
func (o *Xdripjs) GetResistance() float32 {
	if o == nil || IsNil(o.Resistance) {
		var ret float32
		return ret
	}
	return *o.Resistance
}

// GetResistanceOk returns a tuple with the Resistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Xdripjs) GetResistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Resistance) {
		return nil, false
	}
	return o.Resistance, true
}

// HasResistance returns a boolean if a field has been set.
func (o *Xdripjs) HasResistance() bool {
	if o != nil && !IsNil(o.Resistance) {
		return true
	}

	return false
}

// SetResistance gets a reference to the given float32 and assigns it to the Resistance field.
func (o *Xdripjs) SetResistance(v float32) {
	o.Resistance = &v
}

func (o Xdripjs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Xdripjs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StateString) {
		toSerialize["stateString"] = o.StateString
	}
	if !IsNil(o.StateStringShort) {
		toSerialize["stateStringShort"] = o.StateStringShort
	}
	if !IsNil(o.TxId) {
		toSerialize["txId"] = o.TxId
	}
	if !IsNil(o.TxStatus) {
		toSerialize["txStatus"] = o.TxStatus
	}
	if !IsNil(o.TxStatusString) {
		toSerialize["txStatusString"] = o.TxStatusString
	}
	if !IsNil(o.TxStatusStringShort) {
		toSerialize["txStatusStringShort"] = o.TxStatusStringShort
	}
	if !IsNil(o.TxActivation) {
		toSerialize["txActivation"] = o.TxActivation
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Rssi) {
		toSerialize["rssi"] = o.Rssi
	}
	if !IsNil(o.Unfiltered) {
		toSerialize["unfiltered"] = o.Unfiltered
	}
	if !IsNil(o.Filtered) {
		toSerialize["filtered"] = o.Filtered
	}
	if !IsNil(o.Noise) {
		toSerialize["noise"] = o.Noise
	}
	if !IsNil(o.NoiseString) {
		toSerialize["noiseString"] = o.NoiseString
	}
	if !IsNil(o.Slope) {
		toSerialize["slope"] = o.Slope
	}
	if !IsNil(o.Intercept) {
		toSerialize["intercept"] = o.Intercept
	}
	if !IsNil(o.CalType) {
		toSerialize["calType"] = o.CalType
	}
	if !IsNil(o.LastCalibrationDate) {
		toSerialize["lastCalibrationDate"] = o.LastCalibrationDate
	}
	if !IsNil(o.SessionStart) {
		toSerialize["sessionStart"] = o.SessionStart
	}
	if !IsNil(o.BatteryTimestamp) {
		toSerialize["batteryTimestamp"] = o.BatteryTimestamp
	}
	if !IsNil(o.Voltagea) {
		toSerialize["voltagea"] = o.Voltagea
	}
	if !IsNil(o.Voltageb) {
		toSerialize["voltageb"] = o.Voltageb
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Resistance) {
		toSerialize["resistance"] = o.Resistance
	}
	return toSerialize, nil
}

type NullableXdripjs struct {
	value *Xdripjs
	isSet bool
}

func (v NullableXdripjs) Get() *Xdripjs {
	return v.value
}

func (v *NullableXdripjs) Set(val *Xdripjs) {
	v.value = val
	v.isSet = true
}

func (v NullableXdripjs) IsSet() bool {
	return v.isSet
}

func (v *NullableXdripjs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXdripjs(val *Xdripjs) *NullableXdripjs {
	return &NullableXdripjs{value: val, isSet: true}
}

func (v NullableXdripjs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXdripjs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


