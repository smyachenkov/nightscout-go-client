/*
Nightscout API

Testing EntriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/smyachenkov/nightscout-openapi-client"
)

func Test_openapi_EntriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EntriesAPIService AddEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.EntriesAPI.AddEntries(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService EchoStorageSpecGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storage string
		var spec string

		resp, httpRes, err := apiClient.EntriesAPI.EchoStorageSpecGet(context.Background(), storage, spec).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService EntriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntriesAPI.EntriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService EntriesSpecGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spec string

		resp, httpRes, err := apiClient.EntriesAPI.EntriesSpecGet(context.Background(), spec).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService RemoveEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.EntriesAPI.RemoveEntries(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService SliceStorageFieldTypePrefixRegexGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storage string
		var field string
		var type_ string
		var prefix string
		var regex string

		resp, httpRes, err := apiClient.EntriesAPI.SliceStorageFieldTypePrefixRegexGet(context.Background(), storage, field, type_, prefix, regex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService TimesEchoPrefixRegexGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var regex string

		resp, httpRes, err := apiClient.EntriesAPI.TimesEchoPrefixRegexGet(context.Background(), prefix, regex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService TimesPrefixRegexGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var regex string

		resp, httpRes, err := apiClient.EntriesAPI.TimesPrefixRegexGet(context.Background(), prefix, regex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
