/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Pump type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pump{}

// Pump struct for Pump
type Pump struct {
	// dateString, MUST be ISO `8601` format date parseable by Javascript Date()
	Clock *string `json:"clock,omitempty"`
	Battery *Pumpbattery `json:"battery,omitempty"`
	// Amount of insulin remaining in pump reservoir
	Reservoir *float32 `json:"reservoir,omitempty"`
	Status *Pumpstatus `json:"status,omitempty"`
}

// NewPump instantiates a new Pump object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPump() *Pump {
	this := Pump{}
	return &this
}

// NewPumpWithDefaults instantiates a new Pump object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPumpWithDefaults() *Pump {
	this := Pump{}
	return &this
}

// GetClock returns the Clock field value if set, zero value otherwise.
func (o *Pump) GetClock() string {
	if o == nil || IsNil(o.Clock) {
		var ret string
		return ret
	}
	return *o.Clock
}

// GetClockOk returns a tuple with the Clock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pump) GetClockOk() (*string, bool) {
	if o == nil || IsNil(o.Clock) {
		return nil, false
	}
	return o.Clock, true
}

// HasClock returns a boolean if a field has been set.
func (o *Pump) HasClock() bool {
	if o != nil && !IsNil(o.Clock) {
		return true
	}

	return false
}

// SetClock gets a reference to the given string and assigns it to the Clock field.
func (o *Pump) SetClock(v string) {
	o.Clock = &v
}

// GetBattery returns the Battery field value if set, zero value otherwise.
func (o *Pump) GetBattery() Pumpbattery {
	if o == nil || IsNil(o.Battery) {
		var ret Pumpbattery
		return ret
	}
	return *o.Battery
}

// GetBatteryOk returns a tuple with the Battery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pump) GetBatteryOk() (*Pumpbattery, bool) {
	if o == nil || IsNil(o.Battery) {
		return nil, false
	}
	return o.Battery, true
}

// HasBattery returns a boolean if a field has been set.
func (o *Pump) HasBattery() bool {
	if o != nil && !IsNil(o.Battery) {
		return true
	}

	return false
}

// SetBattery gets a reference to the given Pumpbattery and assigns it to the Battery field.
func (o *Pump) SetBattery(v Pumpbattery) {
	o.Battery = &v
}

// GetReservoir returns the Reservoir field value if set, zero value otherwise.
func (o *Pump) GetReservoir() float32 {
	if o == nil || IsNil(o.Reservoir) {
		var ret float32
		return ret
	}
	return *o.Reservoir
}

// GetReservoirOk returns a tuple with the Reservoir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pump) GetReservoirOk() (*float32, bool) {
	if o == nil || IsNil(o.Reservoir) {
		return nil, false
	}
	return o.Reservoir, true
}

// HasReservoir returns a boolean if a field has been set.
func (o *Pump) HasReservoir() bool {
	if o != nil && !IsNil(o.Reservoir) {
		return true
	}

	return false
}

// SetReservoir gets a reference to the given float32 and assigns it to the Reservoir field.
func (o *Pump) SetReservoir(v float32) {
	o.Reservoir = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Pump) GetStatus() Pumpstatus {
	if o == nil || IsNil(o.Status) {
		var ret Pumpstatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pump) GetStatusOk() (*Pumpstatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Pump) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Pumpstatus and assigns it to the Status field.
func (o *Pump) SetStatus(v Pumpstatus) {
	o.Status = &v
}

func (o Pump) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pump) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clock) {
		toSerialize["clock"] = o.Clock
	}
	if !IsNil(o.Battery) {
		toSerialize["battery"] = o.Battery
	}
	if !IsNil(o.Reservoir) {
		toSerialize["reservoir"] = o.Reservoir
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullablePump struct {
	value *Pump
	isSet bool
}

func (v NullablePump) Get() *Pump {
	return v.value
}

func (v *NullablePump) Set(val *Pump) {
	v.value = val
	v.isSet = true
}

func (v NullablePump) IsSet() bool {
	return v.isSet
}

func (v *NullablePump) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePump(val *Pump) *NullablePump {
	return &NullablePump{value: val, isSet: true}
}

func (v NullablePump) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePump) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


