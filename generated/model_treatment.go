/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Treatment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Treatment{}

// Treatment struct for Treatment
type Treatment struct {
	// Internally assigned id.
	Id *string `json:"_id,omitempty"`
	// The type of treatment event.
	EventType *string `json:"eventType,omitempty"`
	// The date of the event, might be set retroactively .
	CreatedAt *string `json:"created_at,omitempty"`
	// Current glucose.
	Glucose *string `json:"glucose,omitempty"`
	// Method used to obtain glucose, Finger or Sensor.
	GlucoseType *string `json:"glucoseType,omitempty"`
	// Amount of carbs consumed in grams.
	Carbs *float32 `json:"carbs,omitempty"`
	// Amount of protein consumed in grams.
	Protein *float32 `json:"protein,omitempty"`
	// Amount of fat consumed in grams.
	Fat *float32 `json:"fat,omitempty"`
	// Amount of insulin, if any.
	Insulin *float32 `json:"insulin,omitempty"`
	// The units for the glucose value, mg/dl or mmol.
	Units *string `json:"units,omitempty"`
	// The transmitter ID of the transmitter being started.
	TransmitterId *string `json:"transmitterId,omitempty"`
	// The code used to start a Dexcom G6 sensor.
	SensorCode *string `json:"sensorCode,omitempty"`
	// Description/notes of treatment.
	Notes *string `json:"notes,omitempty"`
	// Who entered the treatment.
	EnteredBy *string `json:"enteredBy,omitempty"`
}

// NewTreatment instantiates a new Treatment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreatment() *Treatment {
	this := Treatment{}
	return &this
}

// NewTreatmentWithDefaults instantiates a new Treatment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreatmentWithDefaults() *Treatment {
	this := Treatment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Treatment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Treatment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Treatment) SetId(v string) {
	o.Id = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *Treatment) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *Treatment) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *Treatment) SetEventType(v string) {
	o.EventType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Treatment) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Treatment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Treatment) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetGlucose returns the Glucose field value if set, zero value otherwise.
func (o *Treatment) GetGlucose() string {
	if o == nil || IsNil(o.Glucose) {
		var ret string
		return ret
	}
	return *o.Glucose
}

// GetGlucoseOk returns a tuple with the Glucose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetGlucoseOk() (*string, bool) {
	if o == nil || IsNil(o.Glucose) {
		return nil, false
	}
	return o.Glucose, true
}

// HasGlucose returns a boolean if a field has been set.
func (o *Treatment) HasGlucose() bool {
	if o != nil && !IsNil(o.Glucose) {
		return true
	}

	return false
}

// SetGlucose gets a reference to the given string and assigns it to the Glucose field.
func (o *Treatment) SetGlucose(v string) {
	o.Glucose = &v
}

// GetGlucoseType returns the GlucoseType field value if set, zero value otherwise.
func (o *Treatment) GetGlucoseType() string {
	if o == nil || IsNil(o.GlucoseType) {
		var ret string
		return ret
	}
	return *o.GlucoseType
}

// GetGlucoseTypeOk returns a tuple with the GlucoseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetGlucoseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GlucoseType) {
		return nil, false
	}
	return o.GlucoseType, true
}

// HasGlucoseType returns a boolean if a field has been set.
func (o *Treatment) HasGlucoseType() bool {
	if o != nil && !IsNil(o.GlucoseType) {
		return true
	}

	return false
}

// SetGlucoseType gets a reference to the given string and assigns it to the GlucoseType field.
func (o *Treatment) SetGlucoseType(v string) {
	o.GlucoseType = &v
}

// GetCarbs returns the Carbs field value if set, zero value otherwise.
func (o *Treatment) GetCarbs() float32 {
	if o == nil || IsNil(o.Carbs) {
		var ret float32
		return ret
	}
	return *o.Carbs
}

// GetCarbsOk returns a tuple with the Carbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetCarbsOk() (*float32, bool) {
	if o == nil || IsNil(o.Carbs) {
		return nil, false
	}
	return o.Carbs, true
}

// HasCarbs returns a boolean if a field has been set.
func (o *Treatment) HasCarbs() bool {
	if o != nil && !IsNil(o.Carbs) {
		return true
	}

	return false
}

// SetCarbs gets a reference to the given float32 and assigns it to the Carbs field.
func (o *Treatment) SetCarbs(v float32) {
	o.Carbs = &v
}

// GetProtein returns the Protein field value if set, zero value otherwise.
func (o *Treatment) GetProtein() float32 {
	if o == nil || IsNil(o.Protein) {
		var ret float32
		return ret
	}
	return *o.Protein
}

// GetProteinOk returns a tuple with the Protein field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetProteinOk() (*float32, bool) {
	if o == nil || IsNil(o.Protein) {
		return nil, false
	}
	return o.Protein, true
}

// HasProtein returns a boolean if a field has been set.
func (o *Treatment) HasProtein() bool {
	if o != nil && !IsNil(o.Protein) {
		return true
	}

	return false
}

// SetProtein gets a reference to the given float32 and assigns it to the Protein field.
func (o *Treatment) SetProtein(v float32) {
	o.Protein = &v
}

// GetFat returns the Fat field value if set, zero value otherwise.
func (o *Treatment) GetFat() float32 {
	if o == nil || IsNil(o.Fat) {
		var ret float32
		return ret
	}
	return *o.Fat
}

// GetFatOk returns a tuple with the Fat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetFatOk() (*float32, bool) {
	if o == nil || IsNil(o.Fat) {
		return nil, false
	}
	return o.Fat, true
}

// HasFat returns a boolean if a field has been set.
func (o *Treatment) HasFat() bool {
	if o != nil && !IsNil(o.Fat) {
		return true
	}

	return false
}

// SetFat gets a reference to the given float32 and assigns it to the Fat field.
func (o *Treatment) SetFat(v float32) {
	o.Fat = &v
}

// GetInsulin returns the Insulin field value if set, zero value otherwise.
func (o *Treatment) GetInsulin() float32 {
	if o == nil || IsNil(o.Insulin) {
		var ret float32
		return ret
	}
	return *o.Insulin
}

// GetInsulinOk returns a tuple with the Insulin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetInsulinOk() (*float32, bool) {
	if o == nil || IsNil(o.Insulin) {
		return nil, false
	}
	return o.Insulin, true
}

// HasInsulin returns a boolean if a field has been set.
func (o *Treatment) HasInsulin() bool {
	if o != nil && !IsNil(o.Insulin) {
		return true
	}

	return false
}

// SetInsulin gets a reference to the given float32 and assigns it to the Insulin field.
func (o *Treatment) SetInsulin(v float32) {
	o.Insulin = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *Treatment) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *Treatment) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *Treatment) SetUnits(v string) {
	o.Units = &v
}

// GetTransmitterId returns the TransmitterId field value if set, zero value otherwise.
func (o *Treatment) GetTransmitterId() string {
	if o == nil || IsNil(o.TransmitterId) {
		var ret string
		return ret
	}
	return *o.TransmitterId
}

// GetTransmitterIdOk returns a tuple with the TransmitterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetTransmitterIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransmitterId) {
		return nil, false
	}
	return o.TransmitterId, true
}

// HasTransmitterId returns a boolean if a field has been set.
func (o *Treatment) HasTransmitterId() bool {
	if o != nil && !IsNil(o.TransmitterId) {
		return true
	}

	return false
}

// SetTransmitterId gets a reference to the given string and assigns it to the TransmitterId field.
func (o *Treatment) SetTransmitterId(v string) {
	o.TransmitterId = &v
}

// GetSensorCode returns the SensorCode field value if set, zero value otherwise.
func (o *Treatment) GetSensorCode() string {
	if o == nil || IsNil(o.SensorCode) {
		var ret string
		return ret
	}
	return *o.SensorCode
}

// GetSensorCodeOk returns a tuple with the SensorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetSensorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SensorCode) {
		return nil, false
	}
	return o.SensorCode, true
}

// HasSensorCode returns a boolean if a field has been set.
func (o *Treatment) HasSensorCode() bool {
	if o != nil && !IsNil(o.SensorCode) {
		return true
	}

	return false
}

// SetSensorCode gets a reference to the given string and assigns it to the SensorCode field.
func (o *Treatment) SetSensorCode(v string) {
	o.SensorCode = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Treatment) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Treatment) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Treatment) SetNotes(v string) {
	o.Notes = &v
}

// GetEnteredBy returns the EnteredBy field value if set, zero value otherwise.
func (o *Treatment) GetEnteredBy() string {
	if o == nil || IsNil(o.EnteredBy) {
		var ret string
		return ret
	}
	return *o.EnteredBy
}

// GetEnteredByOk returns a tuple with the EnteredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Treatment) GetEnteredByOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredBy) {
		return nil, false
	}
	return o.EnteredBy, true
}

// HasEnteredBy returns a boolean if a field has been set.
func (o *Treatment) HasEnteredBy() bool {
	if o != nil && !IsNil(o.EnteredBy) {
		return true
	}

	return false
}

// SetEnteredBy gets a reference to the given string and assigns it to the EnteredBy field.
func (o *Treatment) SetEnteredBy(v string) {
	o.EnteredBy = &v
}

func (o Treatment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Treatment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Glucose) {
		toSerialize["glucose"] = o.Glucose
	}
	if !IsNil(o.GlucoseType) {
		toSerialize["glucoseType"] = o.GlucoseType
	}
	if !IsNil(o.Carbs) {
		toSerialize["carbs"] = o.Carbs
	}
	if !IsNil(o.Protein) {
		toSerialize["protein"] = o.Protein
	}
	if !IsNil(o.Fat) {
		toSerialize["fat"] = o.Fat
	}
	if !IsNil(o.Insulin) {
		toSerialize["insulin"] = o.Insulin
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.TransmitterId) {
		toSerialize["transmitterId"] = o.TransmitterId
	}
	if !IsNil(o.SensorCode) {
		toSerialize["sensorCode"] = o.SensorCode
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.EnteredBy) {
		toSerialize["enteredBy"] = o.EnteredBy
	}
	return toSerialize, nil
}

type NullableTreatment struct {
	value *Treatment
	isSet bool
}

func (v NullableTreatment) Get() *Treatment {
	return v.value
}

func (v *NullableTreatment) Set(val *Treatment) {
	v.value = val
	v.isSet = true
}

func (v NullableTreatment) IsSet() bool {
	return v.isSet
}

func (v *NullableTreatment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreatment(val *Treatment) *NullableTreatment {
	return &NullableTreatment{value: val, isSet: true}
}

func (v NullableTreatment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreatment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


