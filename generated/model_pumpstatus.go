/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Pumpstatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pumpstatus{}

// Pumpstatus struct for Pumpstatus
type Pumpstatus struct {
	// Pump Status String
	Status *string `json:"status,omitempty"`
	// Is Pump Bolusing
	Bolusing *bool `json:"bolusing,omitempty"`
	// Is Pump Suspended
	Suspended *bool `json:"suspended,omitempty"`
	// dateString, MUST be ISO `8601` format date parseable by Javascript Date()
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewPumpstatus instantiates a new Pumpstatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPumpstatus() *Pumpstatus {
	this := Pumpstatus{}
	return &this
}

// NewPumpstatusWithDefaults instantiates a new Pumpstatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPumpstatusWithDefaults() *Pumpstatus {
	this := Pumpstatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Pumpstatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pumpstatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Pumpstatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Pumpstatus) SetStatus(v string) {
	o.Status = &v
}

// GetBolusing returns the Bolusing field value if set, zero value otherwise.
func (o *Pumpstatus) GetBolusing() bool {
	if o == nil || IsNil(o.Bolusing) {
		var ret bool
		return ret
	}
	return *o.Bolusing
}

// GetBolusingOk returns a tuple with the Bolusing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pumpstatus) GetBolusingOk() (*bool, bool) {
	if o == nil || IsNil(o.Bolusing) {
		return nil, false
	}
	return o.Bolusing, true
}

// HasBolusing returns a boolean if a field has been set.
func (o *Pumpstatus) HasBolusing() bool {
	if o != nil && !IsNil(o.Bolusing) {
		return true
	}

	return false
}

// SetBolusing gets a reference to the given bool and assigns it to the Bolusing field.
func (o *Pumpstatus) SetBolusing(v bool) {
	o.Bolusing = &v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise.
func (o *Pumpstatus) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended) {
		var ret bool
		return ret
	}
	return *o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pumpstatus) GetSuspendedOk() (*bool, bool) {
	if o == nil || IsNil(o.Suspended) {
		return nil, false
	}
	return o.Suspended, true
}

// HasSuspended returns a boolean if a field has been set.
func (o *Pumpstatus) HasSuspended() bool {
	if o != nil && !IsNil(o.Suspended) {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given bool and assigns it to the Suspended field.
func (o *Pumpstatus) SetSuspended(v bool) {
	o.Suspended = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Pumpstatus) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pumpstatus) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Pumpstatus) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *Pumpstatus) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o Pumpstatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pumpstatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Bolusing) {
		toSerialize["bolusing"] = o.Bolusing
	}
	if !IsNil(o.Suspended) {
		toSerialize["suspended"] = o.Suspended
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullablePumpstatus struct {
	value *Pumpstatus
	isSet bool
}

func (v NullablePumpstatus) Get() *Pumpstatus {
	return v.value
}

func (v *NullablePumpstatus) Set(val *Pumpstatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePumpstatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePumpstatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePumpstatus(val *Pumpstatus) *NullablePumpstatus {
	return &NullablePumpstatus{value: val, isSet: true}
}

func (v NullablePumpstatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePumpstatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


