/*
Nightscout API

Own your DData with the Nightscout API

API version: 14.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Uploader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Uploader{}

// Uploader struct for Uploader
type Uploader struct {
	// Uploader Device Battery Voltage
	BatteryVoltage *float32 `json:"batteryVoltage,omitempty"`
	// Uploader Device Battery Percentage Charge Remaining
	Battery *float32 `json:"battery,omitempty"`
}

// NewUploader instantiates a new Uploader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploader() *Uploader {
	this := Uploader{}
	return &this
}

// NewUploaderWithDefaults instantiates a new Uploader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploaderWithDefaults() *Uploader {
	this := Uploader{}
	return &this
}

// GetBatteryVoltage returns the BatteryVoltage field value if set, zero value otherwise.
func (o *Uploader) GetBatteryVoltage() float32 {
	if o == nil || IsNil(o.BatteryVoltage) {
		var ret float32
		return ret
	}
	return *o.BatteryVoltage
}

// GetBatteryVoltageOk returns a tuple with the BatteryVoltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uploader) GetBatteryVoltageOk() (*float32, bool) {
	if o == nil || IsNil(o.BatteryVoltage) {
		return nil, false
	}
	return o.BatteryVoltage, true
}

// HasBatteryVoltage returns a boolean if a field has been set.
func (o *Uploader) HasBatteryVoltage() bool {
	if o != nil && !IsNil(o.BatteryVoltage) {
		return true
	}

	return false
}

// SetBatteryVoltage gets a reference to the given float32 and assigns it to the BatteryVoltage field.
func (o *Uploader) SetBatteryVoltage(v float32) {
	o.BatteryVoltage = &v
}

// GetBattery returns the Battery field value if set, zero value otherwise.
func (o *Uploader) GetBattery() float32 {
	if o == nil || IsNil(o.Battery) {
		var ret float32
		return ret
	}
	return *o.Battery
}

// GetBatteryOk returns a tuple with the Battery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uploader) GetBatteryOk() (*float32, bool) {
	if o == nil || IsNil(o.Battery) {
		return nil, false
	}
	return o.Battery, true
}

// HasBattery returns a boolean if a field has been set.
func (o *Uploader) HasBattery() bool {
	if o != nil && !IsNil(o.Battery) {
		return true
	}

	return false
}

// SetBattery gets a reference to the given float32 and assigns it to the Battery field.
func (o *Uploader) SetBattery(v float32) {
	o.Battery = &v
}

func (o Uploader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Uploader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatteryVoltage) {
		toSerialize["batteryVoltage"] = o.BatteryVoltage
	}
	if !IsNil(o.Battery) {
		toSerialize["battery"] = o.Battery
	}
	return toSerialize, nil
}

type NullableUploader struct {
	value *Uploader
	isSet bool
}

func (v NullableUploader) Get() *Uploader {
	return v.value
}

func (v *NullableUploader) Set(val *Uploader) {
	v.value = val
	v.isSet = true
}

func (v NullableUploader) IsSet() bool {
	return v.isSet
}

func (v *NullableUploader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploader(val *Uploader) *NullableUploader {
	return &NullableUploader{value: val, isSet: true}
}

func (v NullableUploader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


